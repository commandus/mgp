// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // Credentials
  //

  inline
  access::object_traits< ::mgp::Credentials >::id_type
  access::object_traits< ::mgp::Credentials >::
  id (const object_type& o)
  {
    // From pragmas.pgsql.hxx:96:2
    return o.id ();
  }

  inline
  void access::object_traits< ::mgp::Credentials >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::mgp::Credentials >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // User
  //

  inline
  access::object_traits< ::mgp::User >::id_type
  access::object_traits< ::mgp::User >::
  id (const object_type& o)
  {
    // From pragmas.pgsql.hxx:104:2
    return o.id ();
  }

  inline
  void access::object_traits< ::mgp::User >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::mgp::User >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Person
  //

  inline
  access::object_traits< ::mgp::Person >::id_type
  access::object_traits< ::mgp::Person >::
  id (const object_type& o)
  {
    // From pragmas.pgsql.hxx:118:2
    return o.id ();
  }

  inline
  void access::object_traits< ::mgp::Person >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::mgp::Person >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Employee
  //

  inline
  access::object_traits< ::mgp::Employee >::id_type
  access::object_traits< ::mgp::Employee >::
  id (const object_type& o)
  {
    // From pragmas.pgsql.hxx:133:2
    return o.id ();
  }

  inline
  void access::object_traits< ::mgp::Employee >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::mgp::Employee >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Org
  //

  inline
  access::object_traits< ::mgp::Org >::id_type
  access::object_traits< ::mgp::Org >::
  id (const object_type& o)
  {
    // From pragmas.pgsql.hxx:141:2
    return o.id ();
  }

  inline
  void access::object_traits< ::mgp::Org >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::mgp::Org >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Inventory
  //

  inline
  access::object_traits< ::mgp::Inventory >::id_type
  access::object_traits< ::mgp::Inventory >::
  id (const object_type& o)
  {
    // From pragmas.pgsql.hxx:147:2
    return o.id ();
  }

  inline
  void access::object_traits< ::mgp::Inventory >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::mgp::Inventory >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

namespace odb
{
  // Credentials
  //

  inline
  void access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // User
  //

  inline
  void access::object_traits_impl< ::mgp::User, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::mgp::User, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // MediaFile
  //

  inline
  bool access::composite_value_traits< ::mgp::MediaFile, id_pgsql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.id_null;
    r = r && i.content_length_null;
    r = r && i.tag_null;
    r = r && i.content_type_null;
    r = r && i.uri_null;
    r = r && i.data_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::mgp::MediaFile, id_pgsql >::
  set_null (image_type& i,
            pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    i.id_null = true;
    i.content_length_null = true;
    i.tag_null = true;
    i.content_type_null = true;
    i.uri_null = true;
    i.data_null = true;
  }

  // Person
  //

  inline
  void access::object_traits_impl< ::mgp::Person, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Employee
  //

  inline
  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Org
  //

  inline
  void access::object_traits_impl< ::mgp::Org, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Inventory
  //

  inline
  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }
}

