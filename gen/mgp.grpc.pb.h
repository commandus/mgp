// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mgp.proto
#ifndef GRPC_mgp_2eproto__INCLUDED
#define GRPC_mgp_2eproto__INCLUDED

#include "mgp.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace mgp {

// ------------ RPC -------------
//
class Mgp final {
 public:
  static constexpr char const* service_full_name() {
    return "mgp.Mgp";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // user manipulation
    virtual ::grpc::Status getUser(::grpc::ClientContext* context, const ::mgp::User& request, ::mgp::User* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::User>> AsyncgetUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::User>>(AsyncgetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::User>> PrepareAsyncgetUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::User>>(PrepareAsyncgetUserRaw(context, request, cq));
    }
    virtual ::grpc::Status addUser(::grpc::ClientContext* context, const ::mgp::User& request, ::mgp::User* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::User>> AsyncaddUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::User>>(AsyncaddUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::User>> PrepareAsyncaddUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::User>>(PrepareAsyncaddUserRaw(context, request, cq));
    }
    virtual ::grpc::Status rmUser(::grpc::ClientContext* context, const ::mgp::User& request, ::mgp::OperationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::OperationResponse>> AsyncrmUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::OperationResponse>>(AsyncrmUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::OperationResponse>> PrepareAsyncrmUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::OperationResponse>>(PrepareAsyncrmUserRaw(context, request, cq));
    }
    virtual ::grpc::Status setUser(::grpc::ClientContext* context, const ::mgp::User& request, ::mgp::OperationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::OperationResponse>> AsyncsetUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::OperationResponse>>(AsyncsetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::OperationResponse>> PrepareAsyncsetUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::OperationResponse>>(PrepareAsyncsetUserRaw(context, request, cq));
    }
    // List inventory on given route
    virtual ::grpc::Status lsInventory(::grpc::ClientContext* context, const ::mgp::InventoryListRequest& request, ::mgp::InventoryListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::InventoryListResponse>> AsynclsInventory(::grpc::ClientContext* context, const ::mgp::InventoryListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::InventoryListResponse>>(AsynclsInventoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::InventoryListResponse>> PrepareAsynclsInventory(::grpc::ClientContext* context, const ::mgp::InventoryListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mgp::InventoryListResponse>>(PrepareAsynclsInventoryRaw(context, request, cq));
    }
    //        option (google.api.http) = {
    //          post: "/invemtory"
    //          body: "*"
    //        };
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mgp::User>* AsyncgetUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mgp::User>* PrepareAsyncgetUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mgp::User>* AsyncaddUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mgp::User>* PrepareAsyncaddUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mgp::OperationResponse>* AsyncrmUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mgp::OperationResponse>* PrepareAsyncrmUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mgp::OperationResponse>* AsyncsetUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mgp::OperationResponse>* PrepareAsyncsetUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mgp::InventoryListResponse>* AsynclsInventoryRaw(::grpc::ClientContext* context, const ::mgp::InventoryListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mgp::InventoryListResponse>* PrepareAsynclsInventoryRaw(::grpc::ClientContext* context, const ::mgp::InventoryListRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getUser(::grpc::ClientContext* context, const ::mgp::User& request, ::mgp::User* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::User>> AsyncgetUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::User>>(AsyncgetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::User>> PrepareAsyncgetUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::User>>(PrepareAsyncgetUserRaw(context, request, cq));
    }
    ::grpc::Status addUser(::grpc::ClientContext* context, const ::mgp::User& request, ::mgp::User* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::User>> AsyncaddUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::User>>(AsyncaddUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::User>> PrepareAsyncaddUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::User>>(PrepareAsyncaddUserRaw(context, request, cq));
    }
    ::grpc::Status rmUser(::grpc::ClientContext* context, const ::mgp::User& request, ::mgp::OperationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::OperationResponse>> AsyncrmUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::OperationResponse>>(AsyncrmUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::OperationResponse>> PrepareAsyncrmUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::OperationResponse>>(PrepareAsyncrmUserRaw(context, request, cq));
    }
    ::grpc::Status setUser(::grpc::ClientContext* context, const ::mgp::User& request, ::mgp::OperationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::OperationResponse>> AsyncsetUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::OperationResponse>>(AsyncsetUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::OperationResponse>> PrepareAsyncsetUser(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::OperationResponse>>(PrepareAsyncsetUserRaw(context, request, cq));
    }
    ::grpc::Status lsInventory(::grpc::ClientContext* context, const ::mgp::InventoryListRequest& request, ::mgp::InventoryListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::InventoryListResponse>> AsynclsInventory(::grpc::ClientContext* context, const ::mgp::InventoryListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::InventoryListResponse>>(AsynclsInventoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::InventoryListResponse>> PrepareAsynclsInventory(::grpc::ClientContext* context, const ::mgp::InventoryListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mgp::InventoryListResponse>>(PrepareAsynclsInventoryRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::mgp::User>* AsyncgetUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mgp::User>* PrepareAsyncgetUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mgp::User>* AsyncaddUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mgp::User>* PrepareAsyncaddUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mgp::OperationResponse>* AsyncrmUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mgp::OperationResponse>* PrepareAsyncrmUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mgp::OperationResponse>* AsyncsetUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mgp::OperationResponse>* PrepareAsyncsetUserRaw(::grpc::ClientContext* context, const ::mgp::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mgp::InventoryListResponse>* AsynclsInventoryRaw(::grpc::ClientContext* context, const ::mgp::InventoryListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mgp::InventoryListResponse>* PrepareAsynclsInventoryRaw(::grpc::ClientContext* context, const ::mgp::InventoryListRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getUser_;
    const ::grpc::internal::RpcMethod rpcmethod_addUser_;
    const ::grpc::internal::RpcMethod rpcmethod_rmUser_;
    const ::grpc::internal::RpcMethod rpcmethod_setUser_;
    const ::grpc::internal::RpcMethod rpcmethod_lsInventory_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // user manipulation
    virtual ::grpc::Status getUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::User* response);
    virtual ::grpc::Status addUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::User* response);
    virtual ::grpc::Status rmUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::OperationResponse* response);
    virtual ::grpc::Status setUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::OperationResponse* response);
    // List inventory on given route
    virtual ::grpc::Status lsInventory(::grpc::ServerContext* context, const ::mgp::InventoryListRequest* request, ::mgp::InventoryListResponse* response);
    //        option (google.api.http) = {
    //          post: "/invemtory"
    //          body: "*"
    //        };
  };
  template <class BaseClass>
  class WithAsyncMethod_getUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::User* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetUser(::grpc::ServerContext* context, ::mgp::User* request, ::grpc::ServerAsyncResponseWriter< ::mgp::User>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_addUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_addUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::User* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddUser(::grpc::ServerContext* context, ::mgp::User* request, ::grpc::ServerAsyncResponseWriter< ::mgp::User>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_rmUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_rmUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_rmUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rmUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::OperationResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrmUser(::grpc::ServerContext* context, ::mgp::User* request, ::grpc::ServerAsyncResponseWriter< ::mgp::OperationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setUser() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_setUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::OperationResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetUser(::grpc::ServerContext* context, ::mgp::User* request, ::grpc::ServerAsyncResponseWriter< ::mgp::OperationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_lsInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_lsInventory() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_lsInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lsInventory(::grpc::ServerContext* context, const ::mgp::InventoryListRequest* request, ::mgp::InventoryListResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlsInventory(::grpc::ServerContext* context, ::mgp::InventoryListRequest* request, ::grpc::ServerAsyncResponseWriter< ::mgp::InventoryListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getUser<WithAsyncMethod_addUser<WithAsyncMethod_rmUser<WithAsyncMethod_setUser<WithAsyncMethod_lsInventory<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_getUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::User* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_addUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_addUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::User* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_rmUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_rmUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_rmUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rmUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::OperationResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setUser() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_setUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::OperationResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_lsInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_lsInventory() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_lsInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lsInventory(::grpc::ServerContext* context, const ::mgp::InventoryListRequest* request, ::mgp::InventoryListResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mgp::User, ::mgp::User>(std::bind(&WithStreamedUnaryMethod_getUser<BaseClass>::StreamedgetUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::User* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mgp::User,::mgp::User>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_addUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mgp::User, ::mgp::User>(std::bind(&WithStreamedUnaryMethod_addUser<BaseClass>::StreamedaddUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_addUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::User* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mgp::User,::mgp::User>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rmUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_rmUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mgp::User, ::mgp::OperationResponse>(std::bind(&WithStreamedUnaryMethod_rmUser<BaseClass>::StreamedrmUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_rmUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rmUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::OperationResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrmUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mgp::User,::mgp::OperationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_setUser() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mgp::User, ::mgp::OperationResponse>(std::bind(&WithStreamedUnaryMethod_setUser<BaseClass>::StreamedsetUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_setUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setUser(::grpc::ServerContext* context, const ::mgp::User* request, ::mgp::OperationResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mgp::User,::mgp::OperationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_lsInventory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_lsInventory() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::mgp::InventoryListRequest, ::mgp::InventoryListResponse>(std::bind(&WithStreamedUnaryMethod_lsInventory<BaseClass>::StreamedlsInventory, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_lsInventory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status lsInventory(::grpc::ServerContext* context, const ::mgp::InventoryListRequest* request, ::mgp::InventoryListResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlsInventory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mgp::InventoryListRequest,::mgp::InventoryListResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getUser<WithStreamedUnaryMethod_addUser<WithStreamedUnaryMethod_rmUser<WithStreamedUnaryMethod_setUser<WithStreamedUnaryMethod_lsInventory<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getUser<WithStreamedUnaryMethod_addUser<WithStreamedUnaryMethod_rmUser<WithStreamedUnaryMethod_setUser<WithStreamedUnaryMethod_lsInventory<Service > > > > > StreamedService;
};

}  // namespace mgp


#endif  // GRPC_mgp_2eproto__INCLUDED
