// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef MGP_PB_ODB_HXX
#define MGP_PB_ODB_HXX

// Begin prologue.
//
#include "repeatedptrfield-traits.hxx"
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "mgp.pb.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Credentials
  //
  template <>
  struct class_traits< ::mgp::Credentials >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::mgp::Credentials >
  {
    public:
    typedef ::mgp::Credentials object_type;
    typedef ::mgp::Credentials* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::google::protobuf::uint64 id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // User
  //
  template <>
  struct class_traits< ::mgp::User >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::mgp::User >
  {
    public:
    typedef ::mgp::User object_type;
    typedef ::mgp::User* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::google::protobuf::uint64 id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Person
  //
  template <>
  struct class_traits< ::mgp::Person >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::mgp::Person >
  {
    public:
    typedef ::mgp::Person object_type;
    typedef ::mgp::Person* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::google::protobuf::uint64 id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Employee
  //
  template <>
  struct class_traits< ::mgp::Employee >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::mgp::Employee >
  {
    public:
    typedef ::mgp::Employee object_type;
    typedef ::mgp::Employee* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::google::protobuf::uint64 id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Org
  //
  template <>
  struct class_traits< ::mgp::Org >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::mgp::Org >
  {
    public:
    typedef ::mgp::Org object_type;
    typedef ::mgp::Org* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::google::protobuf::uint64 id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Inventory
  //
  template <>
  struct class_traits< ::mgp::Inventory >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::mgp::Inventory >
  {
    public:
    typedef ::mgp::Inventory object_type;
    typedef ::mgp::Inventory* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::google::protobuf::uint64 id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // Credentials
  //
  template <typename A>
  struct query_columns< ::mgp::Credentials, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // start
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    start_type_;

    static const start_type_ start;

    // finish
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    finish_type_;

    static const finish_type_ finish;

    // lastlogin
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    lastlogin_type_;

    static const lastlogin_type_ lastlogin;

    // mk
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    mk_type_;

    static const mk_type_ mk;

    // mv
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    mv_type_;

    static const mv_type_ mv;
  };

  template <typename A>
  const typename query_columns< ::mgp::Credentials, id_pgsql, A >::id_type_
  query_columns< ::mgp::Credentials, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Credentials, id_pgsql, A >::start_type_
  query_columns< ::mgp::Credentials, id_pgsql, A >::
  start (A::table_name, "\"start\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Credentials, id_pgsql, A >::finish_type_
  query_columns< ::mgp::Credentials, id_pgsql, A >::
  finish (A::table_name, "\"finish\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Credentials, id_pgsql, A >::lastlogin_type_
  query_columns< ::mgp::Credentials, id_pgsql, A >::
  lastlogin (A::table_name, "\"lastlogin\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Credentials, id_pgsql, A >::mk_type_
  query_columns< ::mgp::Credentials, id_pgsql, A >::
  mk (A::table_name, "\"mk\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Credentials, id_pgsql, A >::mv_type_
  query_columns< ::mgp::Credentials, id_pgsql, A >::
  mv (A::table_name, "\"mv\"", 0);

  template <typename A>
  struct pointer_query_columns< ::mgp::Credentials, id_pgsql, A >:
    query_columns< ::mgp::Credentials, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::mgp::Credentials, id_pgsql >:
    public access::object_traits< ::mgp::Credentials >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // start_
      //
      int start_value;
      bool start_null;

      // finish_
      //
      int finish_value;
      bool finish_null;

      // lastlogin_
      //
      int lastlogin_value;
      bool lastlogin_null;

      // mk
      //
      details::buffer mk_value;
      std::size_t mk_size;
      bool mk_null;

      // mv
      //
      details::buffer mv_value;
      std::size_t mv_size;
      bool mv_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::mgp::Credentials, id_common >:
    public access::object_traits_impl< ::mgp::Credentials, id_pgsql >
  {
  };

  // User
  //
  template <typename A>
  struct pointer_query_columns< ::mgp::User, id_pgsql, A >
  {
    // credentials
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    credentials_type_;

    static const credentials_type_ credentials;

    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // role
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    role_type_;

    static const role_type_ role;

    // cn
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    cn_type_;

    static const cn_type_ cn;
  };

  template <typename A>
  const typename pointer_query_columns< ::mgp::User, id_pgsql, A >::credentials_type_
  pointer_query_columns< ::mgp::User, id_pgsql, A >::
  credentials (A::table_name, "\"credentials\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mgp::User, id_pgsql, A >::id_type_
  pointer_query_columns< ::mgp::User, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mgp::User, id_pgsql, A >::role_type_
  pointer_query_columns< ::mgp::User, id_pgsql, A >::
  role (A::table_name, "\"role\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mgp::User, id_pgsql, A >::cn_type_
  pointer_query_columns< ::mgp::User, id_pgsql, A >::
  cn (A::table_name, "\"cn\"", 0);

  template <>
  class access::object_traits_impl< ::mgp::User, id_pgsql >:
    public access::object_traits< ::mgp::User >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // credentials_
      //
      long long credentials_value;
      bool credentials_null;

      // id_
      //
      long long id_value;
      bool id_null;

      // role_
      //
      int role_value;
      bool role_null;

      // cn
      //
      details::buffer cn_value;
      std::size_t cn_size;
      bool cn_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct credentials_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::mgp::User, id_common >:
    public access::object_traits_impl< ::mgp::User, id_pgsql >
  {
  };

  // MediaFile
  //
  template <>
  class access::composite_value_traits< ::mgp::MediaFile, id_pgsql >
  {
    public:
    typedef ::mgp::MediaFile value_type;

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // content_length_
      //
      long long content_length_value;
      bool content_length_null;

      // tag_
      //
      int tag_value;
      bool tag_null;

      // content_type
      //
      details::buffer content_type_value;
      std::size_t content_type_size;
      bool content_type_null;

      // uri
      //
      details::buffer uri_value;
      std::size_t uri_size;
      bool uri_null;

      // data
      //
      details::buffer data_value;
      std::size_t data_size;
      bool data_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 6UL;
  };

  // Person
  //
  template <typename A>
  struct query_columns< ::mgp::Person, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // birthday
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    birthday_type_;

    static const birthday_type_ birthday;

    // gender
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    gender_type_;

    static const gender_type_ gender;

    // tag
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    tag_type_;

    static const tag_type_ tag;

    // first_name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    first_name_type_;

    static const first_name_type_ first_name;

    // last_name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    last_name_type_;

    static const last_name_type_ last_name;

    // middle_name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    middle_name_type_;

    static const middle_name_type_ middle_name;

    // prefix
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    prefix_type_;

    static const prefix_type_ prefix;

    // document_type
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    document_type_type_;

    static const document_type_type_ document_type;

    // document
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    document_type_;

    static const document_type_ document;

    // phone_mobile
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    phone_mobile_type_;

    static const phone_mobile_type_ phone_mobile;

    // email
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    email_type_;

    static const email_type_ email;
  };

  template <typename A>
  const typename query_columns< ::mgp::Person, id_pgsql, A >::id_type_
  query_columns< ::mgp::Person, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Person, id_pgsql, A >::birthday_type_
  query_columns< ::mgp::Person, id_pgsql, A >::
  birthday (A::table_name, "\"birthday\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Person, id_pgsql, A >::gender_type_
  query_columns< ::mgp::Person, id_pgsql, A >::
  gender (A::table_name, "\"gender\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Person, id_pgsql, A >::tag_type_
  query_columns< ::mgp::Person, id_pgsql, A >::
  tag (A::table_name, "\"tag\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Person, id_pgsql, A >::first_name_type_
  query_columns< ::mgp::Person, id_pgsql, A >::
  first_name (A::table_name, "\"first_name\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Person, id_pgsql, A >::last_name_type_
  query_columns< ::mgp::Person, id_pgsql, A >::
  last_name (A::table_name, "\"last_name\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Person, id_pgsql, A >::middle_name_type_
  query_columns< ::mgp::Person, id_pgsql, A >::
  middle_name (A::table_name, "\"middle_name\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Person, id_pgsql, A >::prefix_type_
  query_columns< ::mgp::Person, id_pgsql, A >::
  prefix (A::table_name, "\"prefix\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Person, id_pgsql, A >::document_type_type_
  query_columns< ::mgp::Person, id_pgsql, A >::
  document_type (A::table_name, "\"document_type\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Person, id_pgsql, A >::document_type_
  query_columns< ::mgp::Person, id_pgsql, A >::
  document (A::table_name, "\"document\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Person, id_pgsql, A >::phone_mobile_type_
  query_columns< ::mgp::Person, id_pgsql, A >::
  phone_mobile (A::table_name, "\"phone_mobile\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Person, id_pgsql, A >::email_type_
  query_columns< ::mgp::Person, id_pgsql, A >::
  email (A::table_name, "\"email\"", 0);

  template <typename A>
  struct pointer_query_columns< ::mgp::Person, id_pgsql, A >:
    query_columns< ::mgp::Person, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::mgp::Person, id_pgsql >:
    public access::object_traits< ::mgp::Person >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // birthday_
      //
      int birthday_value;
      bool birthday_null;

      // gender_
      //
      int gender_value;
      bool gender_null;

      // tag_
      //
      int tag_value;
      bool tag_null;

      // first_name
      //
      details::buffer first_name_value;
      std::size_t first_name_size;
      bool first_name_null;

      // last_name
      //
      details::buffer last_name_value;
      std::size_t last_name_size;
      bool last_name_null;

      // middle_name
      //
      details::buffer middle_name_value;
      std::size_t middle_name_size;
      bool middle_name_null;

      // prefix
      //
      details::buffer prefix_value;
      std::size_t prefix_size;
      bool prefix_null;

      // document_type
      //
      details::buffer document_type_value;
      std::size_t document_type_size;
      bool document_type_null;

      // document
      //
      details::buffer document_value;
      std::size_t document_size;
      bool document_null;

      // phone_mobile
      //
      details::buffer phone_mobile_value;
      std::size_t phone_mobile_size;
      bool phone_mobile_null;

      // email
      //
      details::buffer email_value;
      std::size_t email_size;
      bool email_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // medias_
    //
    struct medias_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 8UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< medias_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        int index_value;
        bool index_null;

        // value
        //
        composite_value_traits< value_type, id_pgsql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 12UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::mgp::Person, id_common >:
    public access::object_traits_impl< ::mgp::Person, id_pgsql >
  {
  };

  // Employee
  //
  template <typename A>
  struct pointer_query_columns< ::mgp::Employee, id_pgsql, A >
  {
    // person
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    person_type_;

    static const person_type_ person;

    // user
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    user_type_;

    static const user_type_ user;

    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // role_number
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    role_number_type_;

    static const role_number_type_ role_number;

    // name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename pointer_query_columns< ::mgp::Employee, id_pgsql, A >::person_type_
  pointer_query_columns< ::mgp::Employee, id_pgsql, A >::
  person (A::table_name, "\"person\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mgp::Employee, id_pgsql, A >::user_type_
  pointer_query_columns< ::mgp::Employee, id_pgsql, A >::
  user (A::table_name, "\"user\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mgp::Employee, id_pgsql, A >::id_type_
  pointer_query_columns< ::mgp::Employee, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mgp::Employee, id_pgsql, A >::role_number_type_
  pointer_query_columns< ::mgp::Employee, id_pgsql, A >::
  role_number (A::table_name, "\"role_number\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mgp::Employee, id_pgsql, A >::name_type_
  pointer_query_columns< ::mgp::Employee, id_pgsql, A >::
  name (A::table_name, "\"name\"", 0);

  template <>
  class access::object_traits_impl< ::mgp::Employee, id_pgsql >:
    public access::object_traits< ::mgp::Employee >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // person_
      //
      long long person_value;
      bool person_null;

      // user_
      //
      long long user_value;
      bool user_null;

      // id_
      //
      long long id_value;
      bool id_null;

      // role_number_
      //
      int role_number_value;
      bool role_number_null;

      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // medias_
    //
    struct medias_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 8UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< medias_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        int index_value;
        bool index_null;

        // value
        //
        composite_value_traits< value_type, id_pgsql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    struct person_tag;
    struct user_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::mgp::Employee, id_common >:
    public access::object_traits_impl< ::mgp::Employee, id_pgsql >
  {
  };

  // Org
  //
  template <typename A>
  struct pointer_query_columns< ::mgp::Org, id_pgsql, A >
  {
    // manager
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    manager_type_;

    static const manager_type_ manager;

    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename pointer_query_columns< ::mgp::Org, id_pgsql, A >::manager_type_
  pointer_query_columns< ::mgp::Org, id_pgsql, A >::
  manager (A::table_name, "\"manager\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mgp::Org, id_pgsql, A >::id_type_
  pointer_query_columns< ::mgp::Org, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mgp::Org, id_pgsql, A >::name_type_
  pointer_query_columns< ::mgp::Org, id_pgsql, A >::
  name (A::table_name, "\"name\"", 0);

  template <>
  class access::object_traits_impl< ::mgp::Org, id_pgsql >:
    public access::object_traits< ::mgp::Org >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // manager_
      //
      long long manager_value;
      bool manager_null;

      // id_
      //
      long long id_value;
      bool id_null;

      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // medias_
    //
    struct medias_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 8UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< medias_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        int index_value;
        bool index_null;

        // value
        //
        composite_value_traits< value_type, id_pgsql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    struct manager_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::mgp::Org, id_common >:
    public access::object_traits_impl< ::mgp::Org, id_pgsql >
  {
  };

  // Inventory
  //
  template <typename A>
  struct pointer_query_columns< ::mgp::Inventory, id_pgsql, A >
  {
    // org
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    org_type_;

    static const org_type_ org;

    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // inventory_number
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    inventory_number_type_;

    static const inventory_number_type_ inventory_number;

    // name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename pointer_query_columns< ::mgp::Inventory, id_pgsql, A >::org_type_
  pointer_query_columns< ::mgp::Inventory, id_pgsql, A >::
  org (A::table_name, "\"org\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mgp::Inventory, id_pgsql, A >::id_type_
  pointer_query_columns< ::mgp::Inventory, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mgp::Inventory, id_pgsql, A >::inventory_number_type_
  pointer_query_columns< ::mgp::Inventory, id_pgsql, A >::
  inventory_number (A::table_name, "\"inventory_number\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::mgp::Inventory, id_pgsql, A >::name_type_
  pointer_query_columns< ::mgp::Inventory, id_pgsql, A >::
  name (A::table_name, "\"name\"", 0);

  template <>
  class access::object_traits_impl< ::mgp::Inventory, id_pgsql >:
    public access::object_traits< ::mgp::Inventory >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // org_
      //
      long long org_value;
      bool org_null;

      // id_
      //
      long long id_value;
      bool id_null;

      // inventory_number_
      //
      long long inventory_number_value;
      bool inventory_number_null;

      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // medias_
    //
    struct medias_traits
    {
      static const char select_name[];
      static const char insert_name[];
      static const char delete_name[];

      static const unsigned int insert_types[];

      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 8UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef pgsql::container_statements< medias_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        int index_value;
        bool index_null;

        // value
        //
        composite_value_traits< value_type, id_pgsql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (pgsql::bind*,
            const pgsql::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    struct org_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::mgp::Inventory, id_common >:
    public access::object_traits_impl< ::mgp::Inventory, id_pgsql >
  {
  };

  // Credentials
  //
  // User
  //
  template <>
  struct alias_traits<
    ::mgp::Credentials,
    id_pgsql,
    access::object_traits_impl< ::mgp::User, id_pgsql >::credentials_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::mgp::User, id_pgsql >
  {
    // credentials
    //
    typedef
    odb::alias_traits<
      ::mgp::Credentials,
      id_pgsql,
      access::object_traits_impl< ::mgp::User, id_pgsql >::credentials_tag>
    credentials_alias_;
  };

  template <typename A>
  struct query_columns< ::mgp::User, id_pgsql, A >:
    query_columns_base< ::mgp::User, id_pgsql >
  {
    // credentials
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    credentials_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::mgp::Credentials,
        id_pgsql,
        credentials_alias_ > >
    credentials_pointer_type_;

    struct credentials_type_: credentials_pointer_type_, credentials_column_type_
    {
      credentials_type_ (const char* t, const char* c, const char* conv)
        : credentials_column_type_ (t, c, conv)
      {
      }
    };

    static const credentials_type_ credentials;

    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // role
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    role_type_;

    static const role_type_ role;

    // cn
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    cn_type_;

    static const cn_type_ cn;
  };

  template <typename A>
  const typename query_columns< ::mgp::User, id_pgsql, A >::credentials_type_
  query_columns< ::mgp::User, id_pgsql, A >::
  credentials (A::table_name, "\"credentials\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::User, id_pgsql, A >::id_type_
  query_columns< ::mgp::User, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::User, id_pgsql, A >::role_type_
  query_columns< ::mgp::User, id_pgsql, A >::
  role (A::table_name, "\"role\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::User, id_pgsql, A >::cn_type_
  query_columns< ::mgp::User, id_pgsql, A >::
  cn (A::table_name, "\"cn\"", 0);

  // Person
  //
  // Employee
  //
  template <>
  struct alias_traits<
    ::mgp::Person,
    id_pgsql,
    access::object_traits_impl< ::mgp::Employee, id_pgsql >::person_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::mgp::User,
    id_pgsql,
    access::object_traits_impl< ::mgp::Employee, id_pgsql >::user_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::mgp::Employee, id_pgsql >
  {
    // person
    //
    typedef
    odb::alias_traits<
      ::mgp::Person,
      id_pgsql,
      access::object_traits_impl< ::mgp::Employee, id_pgsql >::person_tag>
    person_alias_;

    // user
    //
    typedef
    odb::alias_traits<
      ::mgp::User,
      id_pgsql,
      access::object_traits_impl< ::mgp::Employee, id_pgsql >::user_tag>
    user_alias_;
  };

  template <typename A>
  struct query_columns< ::mgp::Employee, id_pgsql, A >:
    query_columns_base< ::mgp::Employee, id_pgsql >
  {
    // person
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    person_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::mgp::Person,
        id_pgsql,
        person_alias_ > >
    person_pointer_type_;

    struct person_type_: person_pointer_type_, person_column_type_
    {
      person_type_ (const char* t, const char* c, const char* conv)
        : person_column_type_ (t, c, conv)
      {
      }
    };

    static const person_type_ person;

    // user
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    user_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::mgp::User,
        id_pgsql,
        user_alias_ > >
    user_pointer_type_;

    struct user_type_: user_pointer_type_, user_column_type_
    {
      user_type_ (const char* t, const char* c, const char* conv)
        : user_column_type_ (t, c, conv)
      {
      }
    };

    static const user_type_ user;

    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // role_number
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint32,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    role_number_type_;

    static const role_number_type_ role_number;

    // name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename query_columns< ::mgp::Employee, id_pgsql, A >::person_type_
  query_columns< ::mgp::Employee, id_pgsql, A >::
  person (A::table_name, "\"person\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Employee, id_pgsql, A >::user_type_
  query_columns< ::mgp::Employee, id_pgsql, A >::
  user (A::table_name, "\"user\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Employee, id_pgsql, A >::id_type_
  query_columns< ::mgp::Employee, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Employee, id_pgsql, A >::role_number_type_
  query_columns< ::mgp::Employee, id_pgsql, A >::
  role_number (A::table_name, "\"role_number\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Employee, id_pgsql, A >::name_type_
  query_columns< ::mgp::Employee, id_pgsql, A >::
  name (A::table_name, "\"name\"", 0);

  // Org
  //
  template <>
  struct alias_traits<
    ::mgp::Employee,
    id_pgsql,
    access::object_traits_impl< ::mgp::Org, id_pgsql >::manager_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::mgp::Org, id_pgsql >
  {
    // manager
    //
    typedef
    odb::alias_traits<
      ::mgp::Employee,
      id_pgsql,
      access::object_traits_impl< ::mgp::Org, id_pgsql >::manager_tag>
    manager_alias_;
  };

  template <typename A>
  struct query_columns< ::mgp::Org, id_pgsql, A >:
    query_columns_base< ::mgp::Org, id_pgsql >
  {
    // manager
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    manager_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::mgp::Employee,
        id_pgsql,
        manager_alias_ > >
    manager_pointer_type_;

    struct manager_type_: manager_pointer_type_, manager_column_type_
    {
      manager_type_ (const char* t, const char* c, const char* conv)
        : manager_column_type_ (t, c, conv)
      {
      }
    };

    static const manager_type_ manager;

    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename query_columns< ::mgp::Org, id_pgsql, A >::manager_type_
  query_columns< ::mgp::Org, id_pgsql, A >::
  manager (A::table_name, "\"manager\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Org, id_pgsql, A >::id_type_
  query_columns< ::mgp::Org, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Org, id_pgsql, A >::name_type_
  query_columns< ::mgp::Org, id_pgsql, A >::
  name (A::table_name, "\"name\"", 0);

  // Inventory
  //
  template <>
  struct alias_traits<
    ::mgp::Org,
    id_pgsql,
    access::object_traits_impl< ::mgp::Inventory, id_pgsql >::org_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::mgp::Inventory, id_pgsql >
  {
    // org
    //
    typedef
    odb::alias_traits<
      ::mgp::Org,
      id_pgsql,
      access::object_traits_impl< ::mgp::Inventory, id_pgsql >::org_tag>
    org_alias_;
  };

  template <typename A>
  struct query_columns< ::mgp::Inventory, id_pgsql, A >:
    query_columns_base< ::mgp::Inventory, id_pgsql >
  {
    // org
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    org_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::mgp::Org,
        id_pgsql,
        org_alias_ > >
    org_pointer_type_;

    struct org_type_: org_pointer_type_, org_column_type_
    {
      org_type_ (const char* t, const char* c, const char* conv)
        : org_column_type_ (t, c, conv)
      {
      }
    };

    static const org_type_ org;

    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // inventory_number
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::google::protobuf::uint64,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    inventory_number_type_;

    static const inventory_number_type_ inventory_number;

    // name
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename query_columns< ::mgp::Inventory, id_pgsql, A >::org_type_
  query_columns< ::mgp::Inventory, id_pgsql, A >::
  org (A::table_name, "\"org\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Inventory, id_pgsql, A >::id_type_
  query_columns< ::mgp::Inventory, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Inventory, id_pgsql, A >::inventory_number_type_
  query_columns< ::mgp::Inventory, id_pgsql, A >::
  inventory_number (A::table_name, "\"inventory_number\"", 0);

  template <typename A>
  const typename query_columns< ::mgp::Inventory, id_pgsql, A >::name_type_
  query_columns< ::mgp::Inventory, id_pgsql, A >::
  name (A::table_name, "\"name\"", 0);
}

#include "mgp.pb-odb.ixx"

#include <odb/post.hxx>

#endif // MGP_PB_ODB_HXX
