// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "mgp.pb-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // Credentials
  //

  const char access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  persist_statement_name[] = "persist_mgp_Credentials";

  const char access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  find_statement_name[] = "find_mgp_Credentials";

  const char access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  update_statement_name[] = "update_mgp_Credentials";

  const char access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  erase_statement_name[] = "erase_mgp_Credentials";

  const char access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  query_statement_name[] = "query_mgp_Credentials";

  const char access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  erase_query_statement_name[] = "erase_query_mgp_Credentials";

  const unsigned int access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::mgp::Credentials, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::mgp::Credentials, id_pgsql >::id_type
  access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::mgp::Credentials, id_pgsql >::id_type
  access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // start_
    //
    t[1UL] = 0;

    // finish_
    //
    t[2UL] = 0;

    // lastlogin_
    //
    t[3UL] = 0;

    // mk
    //
    if (t[4UL])
    {
      i.mk_value.capacity (i.mk_size);
      grew = true;
    }

    // mv
    //
    if (t[5UL])
    {
      i.mv_value.capacity (i.mv_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // start_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.start_value;
    b[n].is_null = &i.start_null;
    n++;

    // finish_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.finish_value;
    b[n].is_null = &i.finish_null;
    n++;

    // lastlogin_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.lastlogin_value;
    b[n].is_null = &i.lastlogin_null;
    n++;

    // mk
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.mk_value.data ();
    b[n].capacity = i.mk_value.capacity ();
    b[n].size = &i.mk_size;
    b[n].is_null = &i.mk_null;
    n++;

    // mv
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.mv_value.data ();
    b[n].capacity = i.mv_value.capacity ();
    b[n].size = &i.mv_size;
    b[n].is_null = &i.mv_null;
    n++;
  }

  void access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // start_
    //
    {
      // From pragmas.pgsql.hxx:97:32
      ::google::protobuf::uint32 const& v =
        o.start ();

      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_image (
        i.start_value, is_null, v);
      i.start_null = is_null;
    }

    // finish_
    //
    {
      // From pragmas.pgsql.hxx:98:33
      ::google::protobuf::uint32 const& v =
        o.finish ();

      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_image (
        i.finish_value, is_null, v);
      i.finish_null = is_null;
    }

    // lastlogin_
    //
    {
      // From pragmas.pgsql.hxx:99:36
      ::google::protobuf::uint32 const& v =
        o.lastlogin ();

      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_image (
        i.lastlogin_value, is_null, v);
      i.lastlogin_null = is_null;
    }

    // mk
    //
    {
      // From pragmas.pgsql.hxx:100:49
      ::std::string const& v =
        o.mk ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.mk_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.mk_value,
        size,
        is_null,
        v);
      i.mk_null = is_null;
      i.mk_size = size;
      grew = grew || (cap != i.mk_value.capacity ());
    }

    // mv
    //
    {
      // From pragmas.pgsql.hxx:101:49
      ::std::string const& v =
        o.mv ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.mv_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.mv_value,
        size,
        is_null,
        v);
      i.mv_null = is_null;
      i.mv_size = size;
      grew = grew || (cap != i.mv_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      // From pragmas.pgsql.hxx:96:37
      ::google::protobuf::uint64 v;

      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);

      // From pragmas.pgsql.hxx:96:37
      o.set_id (v);
    }

    // start_
    //
    {
      // From pragmas.pgsql.hxx:97:43
      ::google::protobuf::uint32 v;

      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_value (
        v,
        i.start_value,
        i.start_null);

      // From pragmas.pgsql.hxx:97:43
      o.set_start (v);
    }

    // finish_
    //
    {
      // From pragmas.pgsql.hxx:98:45
      ::google::protobuf::uint32 v;

      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_value (
        v,
        i.finish_value,
        i.finish_null);

      // From pragmas.pgsql.hxx:98:45
      o.set_finish (v);
    }

    // lastlogin_
    //
    {
      // From pragmas.pgsql.hxx:99:51
      ::google::protobuf::uint32 v;

      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_value (
        v,
        i.lastlogin_value,
        i.lastlogin_null);

      // From pragmas.pgsql.hxx:99:51
      o.set_lastlogin (v);
    }

    // mk
    //
    {
      // From pragmas.pgsql.hxx:100:57
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.mk_value,
        i.mk_size,
        i.mk_null);

      // From pragmas.pgsql.hxx:100:57
      o._internal_set_mk (v);
    }

    // mv
    //
    {
      // From pragmas.pgsql.hxx:101:57
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.mv_value,
        i.mv_size,
        i.mv_null);

      // From pragmas.pgsql.hxx:101:57
      o._internal_set_mv (v);
    }
  }

  void access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::mgp::Credentials, id_pgsql >::persist_statement[] =
  "INSERT INTO \"Credentials\" "
  "(\"id\", "
  "\"start\", "
  "\"finish\", "
  "\"lastlogin\", "
  "\"mk\", "
  "\"mv\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::mgp::Credentials, id_pgsql >::find_statement[] =
  "SELECT "
  "\"Credentials\".\"id\", "
  "\"Credentials\".\"start\", "
  "\"Credentials\".\"finish\", "
  "\"Credentials\".\"lastlogin\", "
  "\"Credentials\".\"mk\", "
  "\"Credentials\".\"mv\" "
  "FROM \"Credentials\" "
  "WHERE \"Credentials\".\"id\"=$1";

  const char access::object_traits_impl< ::mgp::Credentials, id_pgsql >::update_statement[] =
  "UPDATE \"Credentials\" "
  "SET "
  "\"start\"=$1, "
  "\"finish\"=$2, "
  "\"lastlogin\"=$3, "
  "\"mk\"=$4, "
  "\"mv\"=$5 "
  "WHERE \"id\"=$6";

  const char access::object_traits_impl< ::mgp::Credentials, id_pgsql >::erase_statement[] =
  "DELETE FROM \"Credentials\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::mgp::Credentials, id_pgsql >::query_statement[] =
  "SELECT "
  "\"Credentials\".\"id\", "
  "\"Credentials\".\"start\", "
  "\"Credentials\".\"finish\", "
  "\"Credentials\".\"lastlogin\", "
  "\"Credentials\".\"mk\", "
  "\"Credentials\".\"mv\" "
  "FROM \"Credentials\"";

  const char access::object_traits_impl< ::mgp::Credentials, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"Credentials\"";

  const char access::object_traits_impl< ::mgp::Credentials, id_pgsql >::table_name[] =
  "\"Credentials\"";

  void access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    // From pragmas.pgsql.hxx:96:37
    obj.set_id (id (sts.id_image ()));

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    // From pragmas.pgsql.hxx:96:29
    const id_type& id (
      obj.id ());
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::mgp::Credentials, id_pgsql >::pointer_type
  access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    // From pragmas.pgsql.hxx:96:29
    const id_type& id  (
      obj.id ());

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::mgp::Credentials, id_pgsql >::object_type >
  access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::mgp::Credentials, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // User
  //

  const char access::object_traits_impl< ::mgp::User, id_pgsql >::
  persist_statement_name[] = "persist_mgp_User";

  const char access::object_traits_impl< ::mgp::User, id_pgsql >::
  find_statement_name[] = "find_mgp_User";

  const char access::object_traits_impl< ::mgp::User, id_pgsql >::
  update_statement_name[] = "update_mgp_User";

  const char access::object_traits_impl< ::mgp::User, id_pgsql >::
  erase_statement_name[] = "erase_mgp_User";

  const char access::object_traits_impl< ::mgp::User, id_pgsql >::
  query_statement_name[] = "query_mgp_User";

  const char access::object_traits_impl< ::mgp::User, id_pgsql >::
  erase_query_statement_name[] = "erase_query_mgp_User";

  const unsigned int access::object_traits_impl< ::mgp::User, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::mgp::User, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::mgp::User, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::mgp::Credentials,
    id_pgsql,
    access::object_traits_impl< ::mgp::User, id_pgsql >::credentials_tag>::
  table_name[] = "\"credentials\"";

  struct access::object_traits_impl< ::mgp::User, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::mgp::User, id_pgsql >::id_type
  access::object_traits_impl< ::mgp::User, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::mgp::User, id_pgsql >::id_type
  access::object_traits_impl< ::mgp::User, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::mgp::User, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // credentials_
    //
    t[0UL] = 0;

    // id_
    //
    t[1UL] = 0;

    // role_
    //
    t[2UL] = 0;

    // cn
    //
    if (t[3UL])
    {
      i.cn_value.capacity (i.cn_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::mgp::User, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // credentials_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.credentials_value;
    b[n].is_null = &i.credentials_null;
    n++;

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // role_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.role_value;
    b[n].is_null = &i.role_null;
    n++;

    // cn
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.cn_value.data ();
    b[n].capacity = i.cn_value.capacity ();
    b[n].size = &i.cn_size;
    b[n].is_null = &i.cn_null;
    n++;
  }

  void access::object_traits_impl< ::mgp::User, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::mgp::User, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // credentials_
    //
    {
      // From pragmas.pgsql.hxx:106:31
      ::mgp::Credentials* const& v =
        o.credentials_;

      typedef object_traits< ::mgp::Credentials > obj_traits;
      typedef odb::pointer_traits< ::mgp::Credentials* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.credentials_value, is_null, id);
        i.credentials_null = is_null;
      }
      else
        i.credentials_null = true;
    }

    // role_
    //
    {
      // From pragmas.pgsql.hxx:107:24
      ::google::protobuf::uint32 const& v =
        o.role ();

      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_image (
        i.role_value, is_null, v);
      i.role_null = is_null;
    }

    // cn
    //
    {
      // From pragmas.pgsql.hxx:105:42
      ::std::string const& v =
        o.cn ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.cn_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.cn_value,
        size,
        is_null,
        v);
      i.cn_null = is_null;
      i.cn_size = size;
      grew = grew || (cap != i.cn_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::mgp::User, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // credentials_
    //
    {
      // From pragmas.pgsql.hxx:106:31
      ::mgp::Credentials*& v =
        o.credentials_;

      typedef object_traits< ::mgp::Credentials > obj_traits;
      typedef odb::pointer_traits< ::mgp::Credentials* > ptr_traits;

      if (i.credentials_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.credentials_value,
          i.credentials_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // id_
    //
    {
      // From pragmas.pgsql.hxx:104:30
      ::google::protobuf::uint64 v;

      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);

      // From pragmas.pgsql.hxx:104:30
      o.set_id (v);
    }

    // role_
    //
    {
      // From pragmas.pgsql.hxx:107:34
      ::google::protobuf::uint32 v;

      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_value (
        v,
        i.role_value,
        i.role_null);

      // From pragmas.pgsql.hxx:107:34
      o.set_role (v);
    }

    // cn
    //
    {
      // From pragmas.pgsql.hxx:105:50
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.cn_value,
        i.cn_size,
        i.cn_null);

      // From pragmas.pgsql.hxx:105:50
      o._internal_set_cn (v);
    }
  }

  void access::object_traits_impl< ::mgp::User, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::mgp::User, id_pgsql >::persist_statement[] =
  "INSERT INTO \"User\" "
  "(\"credentials\", "
  "\"id\", "
  "\"role\", "
  "\"cn\") "
  "VALUES "
  "($1, DEFAULT, $2, $3) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::mgp::User, id_pgsql >::find_statement[] =
  "SELECT "
  "\"User\".\"credentials\", "
  "\"User\".\"id\", "
  "\"User\".\"role\", "
  "\"User\".\"cn\" "
  "FROM \"User\" "
  "WHERE \"User\".\"id\"=$1";

  const char access::object_traits_impl< ::mgp::User, id_pgsql >::update_statement[] =
  "UPDATE \"User\" "
  "SET "
  "\"credentials\"=$1, "
  "\"role\"=$2, "
  "\"cn\"=$3 "
  "WHERE \"id\"=$4";

  const char access::object_traits_impl< ::mgp::User, id_pgsql >::erase_statement[] =
  "DELETE FROM \"User\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::mgp::User, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"User\".\"credentials\",\n"
  "\"User\".\"id\",\n"
  "\"User\".\"role\",\n"
  "\"User\".\"cn\"\n"
  "FROM \"User\"\n"
  "LEFT JOIN \"Credentials\" AS \"credentials\" ON \"credentials\".\"id\"=\"User\".\"credentials\"";

  const char access::object_traits_impl< ::mgp::User, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"User\"";

  const char access::object_traits_impl< ::mgp::User, id_pgsql >::table_name[] =
  "\"User\"";

  void access::object_traits_impl< ::mgp::User, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    // From pragmas.pgsql.hxx:104:30
    obj.set_id (id (sts.id_image ()));

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::mgp::User, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    // From pragmas.pgsql.hxx:104:22
    const id_type& id (
      obj.id ());
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::mgp::User, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::mgp::User, id_pgsql >::pointer_type
  access::object_traits_impl< ::mgp::User, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::mgp::User, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::mgp::User, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    // From pragmas.pgsql.hxx:104:22
    const id_type& id  (
      obj.id ());

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::mgp::User, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::mgp::User, id_pgsql >::object_type >
  access::object_traits_impl< ::mgp::User, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::mgp::User, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // MediaFile
  //

  bool access::composite_value_traits< ::mgp::MediaFile, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // content_length_
    //
    t[1UL] = 0;

    // tag_
    //
    t[2UL] = 0;

    // content_type
    //
    if (t[3UL])
    {
      i.content_type_value.capacity (i.content_type_size);
      grew = true;
    }

    // uri
    //
    if (t[4UL])
    {
      i.uri_value.capacity (i.uri_size);
      grew = true;
    }

    // data
    //
    if (t[5UL])
    {
      i.data_value.capacity (i.data_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::mgp::MediaFile, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // id_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
    n++;

    // content_length_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.content_length_value;
    b[n].is_null = &i.content_length_null;
    n++;

    // tag_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.tag_value;
    b[n].is_null = &i.tag_null;
    n++;

    // content_type
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.content_type_value.data ();
    b[n].capacity = i.content_type_value.capacity ();
    b[n].size = &i.content_type_size;
    b[n].is_null = &i.content_type_null;
    n++;

    // uri
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.uri_value.data ();
    b[n].capacity = i.uri_value.capacity ();
    b[n].size = &i.uri_size;
    b[n].is_null = &i.uri_null;
    n++;

    // data
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.data_value.data ();
    b[n].capacity = i.data_value.capacity ();
    b[n].size = &i.data_size;
    b[n].is_null = &i.data_null;
    n++;
  }

  bool access::composite_value_traits< ::mgp::MediaFile, id_pgsql >::
  init (image_type& i,
        const value_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // id_
    //
    {
      ::google::protobuf::uint64 const& v =
        o.id_;

      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    // content_length_
    //
    {
      // From pragmas.pgsql.hxx:113:39
      ::google::protobuf::uint64 const& v =
        o.content_length ();

      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_image (
        i.content_length_value, is_null, v);
      i.content_length_null = is_null;
    }

    // tag_
    //
    {
      // From pragmas.pgsql.hxx:115:28
      ::google::protobuf::uint32 const& v =
        o.tag ();

      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_image (
        i.tag_value, is_null, v);
      i.tag_null = is_null;
    }

    // content_type
    //
    {
      // From pragmas.pgsql.hxx:111:57
      ::std::string const& v =
        o.content_type ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.content_type_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.content_type_value,
        size,
        is_null,
        v);
      i.content_type_null = is_null;
      i.content_type_size = size;
      grew = grew || (cap != i.content_type_value.capacity ());
    }

    // uri
    //
    {
      // From pragmas.pgsql.hxx:112:48
      ::std::string const& v =
        o.uri ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.uri_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.uri_value,
        size,
        is_null,
        v);
      i.uri_null = is_null;
      i.uri_size = size;
      grew = grew || (cap != i.uri_value.capacity ());
    }

    // data
    //
    {
      // From pragmas.pgsql.hxx:114:49
      ::std::string const& v =
        o.data ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.data_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.data_value,
        size,
        is_null,
        v);
      i.data_null = is_null;
      i.data_size = size;
      grew = grew || (cap != i.data_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::mgp::MediaFile, id_pgsql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      ::google::protobuf::uint64& v =
        o.id_;

      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // content_length_
    //
    {
      // From pragmas.pgsql.hxx:113:59
      ::google::protobuf::uint64 v;

      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        v,
        i.content_length_value,
        i.content_length_null);

      // From pragmas.pgsql.hxx:113:59
      o.set_content_length (v);
    }

    // tag_
    //
    {
      // From pragmas.pgsql.hxx:115:37
      ::google::protobuf::uint32 v;

      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_value (
        v,
        i.tag_value,
        i.tag_null);

      // From pragmas.pgsql.hxx:115:37
      o.set_tag (v);
    }

    // content_type
    //
    {
      // From pragmas.pgsql.hxx:111:75
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.content_type_value,
        i.content_type_size,
        i.content_type_null);

      // From pragmas.pgsql.hxx:111:75
      o._internal_set_content_type (v);
    }

    // uri
    //
    {
      // From pragmas.pgsql.hxx:112:57
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.uri_value,
        i.uri_size,
        i.uri_null);

      // From pragmas.pgsql.hxx:112:57
      o._internal_set_uri (v);
    }

    // data
    //
    {
      // From pragmas.pgsql.hxx:114:59
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.data_value,
        i.data_size,
        i.data_null);

      // From pragmas.pgsql.hxx:114:59
      o._internal_set_data (v);
    }
  }

  // Person
  //

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::
  persist_statement_name[] = "persist_mgp_Person";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::
  find_statement_name[] = "find_mgp_Person";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::
  update_statement_name[] = "update_mgp_Person";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::
  erase_statement_name[] = "erase_mgp_Person";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::
  query_statement_name[] = "query_mgp_Person";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::
  erase_query_statement_name[] = "erase_query_mgp_Person";

  const unsigned int access::object_traits_impl< ::mgp::Person, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::mgp::Person, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::mgp::Person, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::mgp::Person, id_pgsql >::extra_statement_cache_type
  {
    pgsql::container_statements_impl< medias_traits > medias_;

    extra_statement_cache_type (
      pgsql::connection& c,
      image_type&,
      id_image_type&,
      pgsql::binding& id,
      pgsql::binding&,
      pgsql::native_binding& idn,
      const unsigned int* idt)
    : medias_ (c, id, idn, idt)
    {
    }
  };

  // medias_
  //

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  select_name[] = "select_mgp_Person_medias";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  insert_name[] = "insert_mgp_Person_medias";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  delete_name[] = "delete_mgp_Person_medias";

  const unsigned int access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  insert_types[] =
  {
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  select_statement[] =
  "SELECT "
  "\"Person_medias\".\"index\", "
  "\"Person_medias\".\"value_id\", "
  "\"Person_medias\".\"value_content_length\", "
  "\"Person_medias\".\"value_tag\", "
  "\"Person_medias\".\"value_content_type\", "
  "\"Person_medias\".\"value_uri\", "
  "\"Person_medias\".\"value_data\" "
  "FROM \"Person_medias\" "
  "WHERE \"Person_medias\".\"object_id\"=$1 ORDER BY \"Person_medias\".\"index\"";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  insert_statement[] =
  "INSERT INTO \"Person_medias\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value_id\", "
  "\"value_content_length\", "
  "\"value_tag\", "
  "\"value_content_type\", "
  "\"value_uri\", "
  "\"value_data\") "
  "VALUES "
  "($1, $2, $3, $4, $5, $6, $7, $8)";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  delete_statement[] =
  "DELETE FROM \"Person_medias\" "
  "WHERE \"object_id\"=$1";

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace pgsql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    composite_value_traits< value_type, id_pgsql >::bind (
      b + n, d.value_value, sk);
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = 0;

    // value
    //
    if (composite_value_traits< value_type, id_pgsql >::grow (
          i.value_value, t + 1UL))
      grew = true;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace pgsql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      pgsql::value_traits<
          index_type,
          pgsql::id_integer >::set_image (
        i.index_value, is_null, *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      if (composite_value_traits< value_type, id_pgsql >::init (
            i.value_value,
            v,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      pgsql::value_traits<
          index_type,
          pgsql::id_integer >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      composite_value_traits< value_type, id_pgsql >::init (
        v,
        i.value_value,
        db);
    }
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  delete_ (void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::medias_traits::
  erase (statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::mgp::Person, id_pgsql >::id_type
  access::object_traits_impl< ::mgp::Person, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::mgp::Person, id_pgsql >::id_type
  access::object_traits_impl< ::mgp::Person, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::mgp::Person, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // birthday_
    //
    t[1UL] = 0;

    // gender_
    //
    t[2UL] = 0;

    // tag_
    //
    t[3UL] = 0;

    // first_name
    //
    if (t[4UL])
    {
      i.first_name_value.capacity (i.first_name_size);
      grew = true;
    }

    // last_name
    //
    if (t[5UL])
    {
      i.last_name_value.capacity (i.last_name_size);
      grew = true;
    }

    // middle_name
    //
    if (t[6UL])
    {
      i.middle_name_value.capacity (i.middle_name_size);
      grew = true;
    }

    // prefix
    //
    if (t[7UL])
    {
      i.prefix_value.capacity (i.prefix_size);
      grew = true;
    }

    // document_type
    //
    if (t[8UL])
    {
      i.document_type_value.capacity (i.document_type_size);
      grew = true;
    }

    // document
    //
    if (t[9UL])
    {
      i.document_value.capacity (i.document_size);
      grew = true;
    }

    // phone_mobile
    //
    if (t[10UL])
    {
      i.phone_mobile_value.capacity (i.phone_mobile_size);
      grew = true;
    }

    // email
    //
    if (t[11UL])
    {
      i.email_value.capacity (i.email_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // birthday_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.birthday_value;
    b[n].is_null = &i.birthday_null;
    n++;

    // gender_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.gender_value;
    b[n].is_null = &i.gender_null;
    n++;

    // tag_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.tag_value;
    b[n].is_null = &i.tag_null;
    n++;

    // first_name
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.first_name_value.data ();
    b[n].capacity = i.first_name_value.capacity ();
    b[n].size = &i.first_name_size;
    b[n].is_null = &i.first_name_null;
    n++;

    // last_name
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.last_name_value.data ();
    b[n].capacity = i.last_name_value.capacity ();
    b[n].size = &i.last_name_size;
    b[n].is_null = &i.last_name_null;
    n++;

    // middle_name
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.middle_name_value.data ();
    b[n].capacity = i.middle_name_value.capacity ();
    b[n].size = &i.middle_name_size;
    b[n].is_null = &i.middle_name_null;
    n++;

    // prefix
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.prefix_value.data ();
    b[n].capacity = i.prefix_value.capacity ();
    b[n].size = &i.prefix_size;
    b[n].is_null = &i.prefix_null;
    n++;

    // document_type
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.document_type_value.data ();
    b[n].capacity = i.document_type_value.capacity ();
    b[n].size = &i.document_type_size;
    b[n].is_null = &i.document_type_null;
    n++;

    // document
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.document_value.data ();
    b[n].capacity = i.document_value.capacity ();
    b[n].size = &i.document_size;
    b[n].is_null = &i.document_null;
    n++;

    // phone_mobile
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.phone_mobile_value.data ();
    b[n].capacity = i.phone_mobile_value.capacity ();
    b[n].size = &i.phone_mobile_size;
    b[n].is_null = &i.phone_mobile_null;
    n++;

    // email
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.email_value.data ();
    b[n].capacity = i.email_value.capacity ();
    b[n].size = &i.email_size;
    b[n].is_null = &i.email_null;
    n++;
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::mgp::Person, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // birthday_
    //
    {
      // From pragmas.pgsql.hxx:123:30
      ::google::protobuf::uint32 const& v =
        o.birthday ();

      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_image (
        i.birthday_value, is_null, v);
      i.birthday_null = is_null;
    }

    // gender_
    //
    {
      // From pragmas.pgsql.hxx:128:28
      ::google::protobuf::uint32 const& v =
        o.gender ();

      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_image (
        i.gender_value, is_null, v);
      i.gender_null = is_null;
    }

    // tag_
    //
    {
      // From pragmas.pgsql.hxx:129:25
      ::google::protobuf::uint32 const& v =
        o.tag ();

      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_image (
        i.tag_value, is_null, v);
      i.tag_null = is_null;
    }

    // first_name
    //
    {
      // From pragmas.pgsql.hxx:119:52
      ::std::string const& v =
        o.first_name ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.first_name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.first_name_value,
        size,
        is_null,
        v);
      i.first_name_null = is_null;
      i.first_name_size = size;
      grew = grew || (cap != i.first_name_value.capacity ());
    }

    // last_name
    //
    {
      // From pragmas.pgsql.hxx:120:51
      ::std::string const& v =
        o.last_name ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.last_name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.last_name_value,
        size,
        is_null,
        v);
      i.last_name_null = is_null;
      i.last_name_size = size;
      grew = grew || (cap != i.last_name_value.capacity ());
    }

    // middle_name
    //
    {
      // From pragmas.pgsql.hxx:121:53
      ::std::string const& v =
        o.middle_name ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.middle_name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.middle_name_value,
        size,
        is_null,
        v);
      i.middle_name_null = is_null;
      i.middle_name_size = size;
      grew = grew || (cap != i.middle_name_value.capacity ());
    }

    // prefix
    //
    {
      // From pragmas.pgsql.hxx:122:48
      ::std::string const& v =
        o.prefix ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.prefix_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.prefix_value,
        size,
        is_null,
        v);
      i.prefix_null = is_null;
      i.prefix_size = size;
      grew = grew || (cap != i.prefix_value.capacity ());
    }

    // document_type
    //
    {
      // From pragmas.pgsql.hxx:124:55
      ::std::string const& v =
        o.document_type ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.document_type_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.document_type_value,
        size,
        is_null,
        v);
      i.document_type_null = is_null;
      i.document_type_size = size;
      grew = grew || (cap != i.document_type_value.capacity ());
    }

    // document
    //
    {
      // From pragmas.pgsql.hxx:125:50
      ::std::string const& v =
        o.document ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.document_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.document_value,
        size,
        is_null,
        v);
      i.document_null = is_null;
      i.document_size = size;
      grew = grew || (cap != i.document_value.capacity ());
    }

    // phone_mobile
    //
    {
      // From pragmas.pgsql.hxx:126:54
      ::std::string const& v =
        o.phone_mobile ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.phone_mobile_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.phone_mobile_value,
        size,
        is_null,
        v);
      i.phone_mobile_null = is_null;
      i.phone_mobile_size = size;
      grew = grew || (cap != i.phone_mobile_value.capacity ());
    }

    // email
    //
    {
      // From pragmas.pgsql.hxx:127:47
      ::std::string const& v =
        o.email ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.email_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.email_value,
        size,
        is_null,
        v);
      i.email_null = is_null;
      i.email_size = size;
      grew = grew || (cap != i.email_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      // From pragmas.pgsql.hxx:118:32
      ::google::protobuf::uint64 v;

      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);

      // From pragmas.pgsql.hxx:118:32
      o.set_id (v);
    }

    // birthday_
    //
    {
      // From pragmas.pgsql.hxx:123:44
      ::google::protobuf::uint32 v;

      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_value (
        v,
        i.birthday_value,
        i.birthday_null);

      // From pragmas.pgsql.hxx:123:44
      o.set_birthday (v);
    }

    // gender_
    //
    {
      // From pragmas.pgsql.hxx:128:40
      ::google::protobuf::uint32 v;

      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_value (
        v,
        i.gender_value,
        i.gender_null);

      // From pragmas.pgsql.hxx:128:40
      o.set_gender (v);
    }

    // tag_
    //
    {
      // From pragmas.pgsql.hxx:129:34
      ::google::protobuf::uint32 v;

      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_value (
        v,
        i.tag_value,
        i.tag_null);

      // From pragmas.pgsql.hxx:129:34
      o.set_tag (v);
    }

    // first_name
    //
    {
      // From pragmas.pgsql.hxx:119:68
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.first_name_value,
        i.first_name_size,
        i.first_name_null);

      // From pragmas.pgsql.hxx:119:68
      o._internal_set_first_name (v);
    }

    // last_name
    //
    {
      // From pragmas.pgsql.hxx:120:66
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.last_name_value,
        i.last_name_size,
        i.last_name_null);

      // From pragmas.pgsql.hxx:120:66
      o._internal_set_last_name (v);
    }

    // middle_name
    //
    {
      // From pragmas.pgsql.hxx:121:70
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.middle_name_value,
        i.middle_name_size,
        i.middle_name_null);

      // From pragmas.pgsql.hxx:121:70
      o._internal_set_middle_name (v);
    }

    // prefix
    //
    {
      // From pragmas.pgsql.hxx:122:60
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.prefix_value,
        i.prefix_size,
        i.prefix_null);

      // From pragmas.pgsql.hxx:122:60
      o._internal_set_prefix (v);
    }

    // document_type
    //
    {
      // From pragmas.pgsql.hxx:124:74
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.document_type_value,
        i.document_type_size,
        i.document_type_null);

      // From pragmas.pgsql.hxx:124:74
      o._internal_set_document_type (v);
    }

    // document
    //
    {
      // From pragmas.pgsql.hxx:125:64
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.document_value,
        i.document_size,
        i.document_null);

      // From pragmas.pgsql.hxx:125:64
      o._internal_set_document (v);
    }

    // phone_mobile
    //
    {
      // From pragmas.pgsql.hxx:126:72
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.phone_mobile_value,
        i.phone_mobile_size,
        i.phone_mobile_null);

      // From pragmas.pgsql.hxx:126:72
      o._internal_set_phone_mobile (v);
    }

    // email
    //
    {
      // From pragmas.pgsql.hxx:127:58
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.email_value,
        i.email_size,
        i.email_null);

      // From pragmas.pgsql.hxx:127:58
      o._internal_set_email (v);
    }
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::persist_statement[] =
  "INSERT INTO \"Person\" "
  "(\"id\", "
  "\"birthday\", "
  "\"gender\", "
  "\"tag\", "
  "\"first_name\", "
  "\"last_name\", "
  "\"middle_name\", "
  "\"prefix\", "
  "\"document_type\", "
  "\"document\", "
  "\"phone_mobile\", "
  "\"email\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::find_statement[] =
  "SELECT "
  "\"Person\".\"id\", "
  "\"Person\".\"birthday\", "
  "\"Person\".\"gender\", "
  "\"Person\".\"tag\", "
  "\"Person\".\"first_name\", "
  "\"Person\".\"last_name\", "
  "\"Person\".\"middle_name\", "
  "\"Person\".\"prefix\", "
  "\"Person\".\"document_type\", "
  "\"Person\".\"document\", "
  "\"Person\".\"phone_mobile\", "
  "\"Person\".\"email\" "
  "FROM \"Person\" "
  "WHERE \"Person\".\"id\"=$1";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::update_statement[] =
  "UPDATE \"Person\" "
  "SET "
  "\"birthday\"=$1, "
  "\"gender\"=$2, "
  "\"tag\"=$3, "
  "\"first_name\"=$4, "
  "\"last_name\"=$5, "
  "\"middle_name\"=$6, "
  "\"prefix\"=$7, "
  "\"document_type\"=$8, "
  "\"document\"=$9, "
  "\"phone_mobile\"=$10, "
  "\"email\"=$11 "
  "WHERE \"id\"=$12";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::erase_statement[] =
  "DELETE FROM \"Person\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::query_statement[] =
  "SELECT "
  "\"Person\".\"id\", "
  "\"Person\".\"birthday\", "
  "\"Person\".\"gender\", "
  "\"Person\".\"tag\", "
  "\"Person\".\"first_name\", "
  "\"Person\".\"last_name\", "
  "\"Person\".\"middle_name\", "
  "\"Person\".\"prefix\", "
  "\"Person\".\"document_type\", "
  "\"Person\".\"document\", "
  "\"Person\".\"phone_mobile\", "
  "\"Person\".\"email\" "
  "FROM \"Person\"";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"Person\"";

  const char access::object_traits_impl< ::mgp::Person, id_pgsql >::table_name[] =
  "\"Person\"";

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    // From pragmas.pgsql.hxx:118:32
    obj.set_id (id (sts.id_image ()));

    id_image_type& i (sts.id_image ());
    // From pragmas.pgsql.hxx:118:24
    init (i, obj.id ());

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    {
      ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile > const& v =
        obj.medias_;

      medias_traits::persist (
        v,
        esc.medias_);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    // From pragmas.pgsql.hxx:118:24
    const id_type& id (
      obj.id ());
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    {
      ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile > const& v =
        obj.medias_;

      medias_traits::update (
        v,
        esc.medias_);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    medias_traits::erase (
      esc.medias_);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::mgp::Person, id_pgsql >::pointer_type
  access::object_traits_impl< ::mgp::Person, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::mgp::Person, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::mgp::Person, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    // From pragmas.pgsql.hxx:118:24
    const id_type& id  (
      obj.id ());

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::mgp::Person, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::mgp::Person, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    {
      ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile >& v =
        obj.medias_;

      medias_traits::load (
        v,
        esc.medias_);
    }
  }

  result< access::object_traits_impl< ::mgp::Person, id_pgsql >::object_type >
  access::object_traits_impl< ::mgp::Person, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::mgp::Person, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // Employee
  //

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  persist_statement_name[] = "persist_mgp_Employee";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  find_statement_name[] = "find_mgp_Employee";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  update_statement_name[] = "update_mgp_Employee";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  erase_statement_name[] = "erase_mgp_Employee";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  query_statement_name[] = "query_mgp_Employee";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  erase_query_statement_name[] = "erase_query_mgp_Employee";

  const unsigned int access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::mgp::Person,
    id_pgsql,
    access::object_traits_impl< ::mgp::Employee, id_pgsql >::person_tag>::
  table_name[] = "\"person\"";

  const char alias_traits<  ::mgp::User,
    id_pgsql,
    access::object_traits_impl< ::mgp::Employee, id_pgsql >::user_tag>::
  table_name[] = "\"user\"";

  struct access::object_traits_impl< ::mgp::Employee, id_pgsql >::extra_statement_cache_type
  {
    pgsql::container_statements_impl< medias_traits > medias_;

    extra_statement_cache_type (
      pgsql::connection& c,
      image_type&,
      id_image_type&,
      pgsql::binding& id,
      pgsql::binding&,
      pgsql::native_binding& idn,
      const unsigned int* idt)
    : medias_ (c, id, idn, idt)
    {
    }
  };

  // medias_
  //

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  select_name[] = "select_mgp_Employee_medias";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  insert_name[] = "insert_mgp_Employee_medias";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  delete_name[] = "delete_mgp_Employee_medias";

  const unsigned int access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  insert_types[] =
  {
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  select_statement[] =
  "SELECT "
  "\"Employee_medias\".\"index\", "
  "\"Employee_medias\".\"value_id\", "
  "\"Employee_medias\".\"value_content_length\", "
  "\"Employee_medias\".\"value_tag\", "
  "\"Employee_medias\".\"value_content_type\", "
  "\"Employee_medias\".\"value_uri\", "
  "\"Employee_medias\".\"value_data\" "
  "FROM \"Employee_medias\" "
  "WHERE \"Employee_medias\".\"object_id\"=$1 ORDER BY \"Employee_medias\".\"index\"";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  insert_statement[] =
  "INSERT INTO \"Employee_medias\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value_id\", "
  "\"value_content_length\", "
  "\"value_tag\", "
  "\"value_content_type\", "
  "\"value_uri\", "
  "\"value_data\") "
  "VALUES "
  "($1, $2, $3, $4, $5, $6, $7, $8)";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  delete_statement[] =
  "DELETE FROM \"Employee_medias\" "
  "WHERE \"object_id\"=$1";

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace pgsql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    composite_value_traits< value_type, id_pgsql >::bind (
      b + n, d.value_value, sk);
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = 0;

    // value
    //
    if (composite_value_traits< value_type, id_pgsql >::grow (
          i.value_value, t + 1UL))
      grew = true;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace pgsql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      pgsql::value_traits<
          index_type,
          pgsql::id_integer >::set_image (
        i.index_value, is_null, *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      if (composite_value_traits< value_type, id_pgsql >::init (
            i.value_value,
            v,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      pgsql::value_traits<
          index_type,
          pgsql::id_integer >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      composite_value_traits< value_type, id_pgsql >::init (
        v,
        i.value_value,
        db);
    }
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  delete_ (void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::medias_traits::
  erase (statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::mgp::Employee, id_pgsql >::id_type
  access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::mgp::Employee, id_pgsql >::id_type
  access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // person_
    //
    t[0UL] = 0;

    // user_
    //
    t[1UL] = 0;

    // id_
    //
    t[2UL] = 0;

    // role_number_
    //
    t[3UL] = 0;

    // name
    //
    if (t[4UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // person_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.person_value;
    b[n].is_null = &i.person_null;
    n++;

    // user_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.user_value;
    b[n].is_null = &i.user_null;
    n++;

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // role_number_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.role_number_value;
    b[n].is_null = &i.role_number_null;
    n++;

    // name
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.name_value.data ();
    b[n].capacity = i.name_value.capacity ();
    b[n].size = &i.name_size;
    b[n].is_null = &i.name_null;
    n++;
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // person_
    //
    {
      // From pragmas.pgsql.hxx:136:30
      ::mgp::Person* const& v =
        o.person_;

      typedef object_traits< ::mgp::Person > obj_traits;
      typedef odb::pointer_traits< ::mgp::Person* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.person_value, is_null, id);
        i.person_null = is_null;
      }
      else
        i.person_null = true;
    }

    // user_
    //
    {
      // From pragmas.pgsql.hxx:137:28
      ::mgp::User* const& v =
        o.user_;

      typedef object_traits< ::mgp::User > obj_traits;
      typedef odb::pointer_traits< ::mgp::User* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.user_value, is_null, id);
        i.user_null = is_null;
      }
      else
        i.user_null = true;
    }

    // role_number_
    //
    {
      // From pragmas.pgsql.hxx:134:35
      ::google::protobuf::uint32 const& v =
        o.role_number ();

      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_image (
        i.role_number_value, is_null, v);
      i.role_number_null = is_null;
    }

    // name
    //
    {
      // From pragmas.pgsql.hxx:135:48
      ::std::string const& v =
        o.name ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.name_value,
        size,
        is_null,
        v);
      i.name_null = is_null;
      i.name_size = size;
      grew = grew || (cap != i.name_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // person_
    //
    {
      // From pragmas.pgsql.hxx:136:30
      ::mgp::Person*& v =
        o.person_;

      typedef object_traits< ::mgp::Person > obj_traits;
      typedef odb::pointer_traits< ::mgp::Person* > ptr_traits;

      if (i.person_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.person_value,
          i.person_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // user_
    //
    {
      // From pragmas.pgsql.hxx:137:28
      ::mgp::User*& v =
        o.user_;

      typedef object_traits< ::mgp::User > obj_traits;
      typedef odb::pointer_traits< ::mgp::User* > ptr_traits;

      if (i.user_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.user_value,
          i.user_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // id_
    //
    {
      // From pragmas.pgsql.hxx:133:34
      ::google::protobuf::uint64 v;

      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);

      // From pragmas.pgsql.hxx:133:34
      o.set_id (v);
    }

    // role_number_
    //
    {
      // From pragmas.pgsql.hxx:134:52
      ::google::protobuf::uint32 v;

      pgsql::value_traits<
          ::google::protobuf::uint32,
          pgsql::id_integer >::set_value (
        v,
        i.role_number_value,
        i.role_number_null);

      // From pragmas.pgsql.hxx:134:52
      o.set_role_number (v);
    }

    // name
    //
    {
      // From pragmas.pgsql.hxx:135:58
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);

      // From pragmas.pgsql.hxx:135:58
      o._internal_set_name (v);
    }
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::persist_statement[] =
  "INSERT INTO \"Employee\" "
  "(\"person\", "
  "\"user\", "
  "\"id\", "
  "\"role_number\", "
  "\"name\") "
  "VALUES "
  "($1, $2, DEFAULT, $3, $4) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::find_statement[] =
  "SELECT "
  "\"Employee\".\"person\", "
  "\"Employee\".\"user\", "
  "\"Employee\".\"id\", "
  "\"Employee\".\"role_number\", "
  "\"Employee\".\"name\" "
  "FROM \"Employee\" "
  "WHERE \"Employee\".\"id\"=$1";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::update_statement[] =
  "UPDATE \"Employee\" "
  "SET "
  "\"person\"=$1, "
  "\"user\"=$2, "
  "\"role_number\"=$3, "
  "\"name\"=$4 "
  "WHERE \"id\"=$5";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::erase_statement[] =
  "DELETE FROM \"Employee\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"Employee\".\"person\",\n"
  "\"Employee\".\"user\",\n"
  "\"Employee\".\"id\",\n"
  "\"Employee\".\"role_number\",\n"
  "\"Employee\".\"name\"\n"
  "FROM \"Employee\"\n"
  "LEFT JOIN \"Person\" AS \"person\" ON \"person\".\"id\"=\"Employee\".\"person\"\n"
  "LEFT JOIN \"User\" AS \"user\" ON \"user\".\"id\"=\"Employee\".\"user\"";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"Employee\"";

  const char access::object_traits_impl< ::mgp::Employee, id_pgsql >::table_name[] =
  "\"Employee\"";

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    // From pragmas.pgsql.hxx:133:34
    obj.set_id (id (sts.id_image ()));

    id_image_type& i (sts.id_image ());
    // From pragmas.pgsql.hxx:133:26
    init (i, obj.id ());

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    {
      ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile > const& v =
        obj.medias_;

      medias_traits::persist (
        v,
        esc.medias_);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    // From pragmas.pgsql.hxx:133:26
    const id_type& id (
      obj.id ());
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    {
      ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile > const& v =
        obj.medias_;

      medias_traits::update (
        v,
        esc.medias_);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    medias_traits::erase (
      esc.medias_);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::mgp::Employee, id_pgsql >::pointer_type
  access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    // From pragmas.pgsql.hxx:133:26
    const id_type& id  (
      obj.id ());

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    {
      ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile >& v =
        obj.medias_;

      medias_traits::load (
        v,
        esc.medias_);
    }
  }

  result< access::object_traits_impl< ::mgp::Employee, id_pgsql >::object_type >
  access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::mgp::Employee, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // Org
  //

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::
  persist_statement_name[] = "persist_mgp_Org";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::
  find_statement_name[] = "find_mgp_Org";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::
  update_statement_name[] = "update_mgp_Org";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::
  erase_statement_name[] = "erase_mgp_Org";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::
  query_statement_name[] = "query_mgp_Org";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::
  erase_query_statement_name[] = "erase_query_mgp_Org";

  const unsigned int access::object_traits_impl< ::mgp::Org, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::mgp::Org, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::mgp::Org, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::mgp::Employee,
    id_pgsql,
    access::object_traits_impl< ::mgp::Org, id_pgsql >::manager_tag>::
  table_name[] = "\"manager\"";

  struct access::object_traits_impl< ::mgp::Org, id_pgsql >::extra_statement_cache_type
  {
    pgsql::container_statements_impl< medias_traits > medias_;

    extra_statement_cache_type (
      pgsql::connection& c,
      image_type&,
      id_image_type&,
      pgsql::binding& id,
      pgsql::binding&,
      pgsql::native_binding& idn,
      const unsigned int* idt)
    : medias_ (c, id, idn, idt)
    {
    }
  };

  // medias_
  //

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  select_name[] = "select_mgp_Org_medias";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  insert_name[] = "insert_mgp_Org_medias";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  delete_name[] = "delete_mgp_Org_medias";

  const unsigned int access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  insert_types[] =
  {
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  select_statement[] =
  "SELECT "
  "\"Org_medias\".\"index\", "
  "\"Org_medias\".\"value_id\", "
  "\"Org_medias\".\"value_content_length\", "
  "\"Org_medias\".\"value_tag\", "
  "\"Org_medias\".\"value_content_type\", "
  "\"Org_medias\".\"value_uri\", "
  "\"Org_medias\".\"value_data\" "
  "FROM \"Org_medias\" "
  "WHERE \"Org_medias\".\"object_id\"=$1 ORDER BY \"Org_medias\".\"index\"";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  insert_statement[] =
  "INSERT INTO \"Org_medias\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value_id\", "
  "\"value_content_length\", "
  "\"value_tag\", "
  "\"value_content_type\", "
  "\"value_uri\", "
  "\"value_data\") "
  "VALUES "
  "($1, $2, $3, $4, $5, $6, $7, $8)";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  delete_statement[] =
  "DELETE FROM \"Org_medias\" "
  "WHERE \"object_id\"=$1";

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace pgsql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    composite_value_traits< value_type, id_pgsql >::bind (
      b + n, d.value_value, sk);
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = 0;

    // value
    //
    if (composite_value_traits< value_type, id_pgsql >::grow (
          i.value_value, t + 1UL))
      grew = true;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace pgsql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      pgsql::value_traits<
          index_type,
          pgsql::id_integer >::set_image (
        i.index_value, is_null, *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      if (composite_value_traits< value_type, id_pgsql >::init (
            i.value_value,
            v,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      pgsql::value_traits<
          index_type,
          pgsql::id_integer >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      composite_value_traits< value_type, id_pgsql >::init (
        v,
        i.value_value,
        db);
    }
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  delete_ (void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::medias_traits::
  erase (statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::mgp::Org, id_pgsql >::id_type
  access::object_traits_impl< ::mgp::Org, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::mgp::Org, id_pgsql >::id_type
  access::object_traits_impl< ::mgp::Org, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::mgp::Org, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // manager_
    //
    t[0UL] = 0;

    // id_
    //
    t[1UL] = 0;

    // name
    //
    if (t[2UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // manager_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.manager_value;
    b[n].is_null = &i.manager_null;
    n++;

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // name
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.name_value.data ();
    b[n].capacity = i.name_value.capacity ();
    b[n].size = &i.name_size;
    b[n].is_null = &i.name_null;
    n++;
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::mgp::Org, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // manager_
    //
    {
      // From pragmas.pgsql.hxx:143:26
      ::mgp::Employee* const& v =
        o.manager_;

      typedef object_traits< ::mgp::Employee > obj_traits;
      typedef odb::pointer_traits< ::mgp::Employee* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.manager_value, is_null, id);
        i.manager_null = is_null;
      }
      else
        i.manager_null = true;
    }

    // name
    //
    {
      // From pragmas.pgsql.hxx:142:43
      ::std::string const& v =
        o.name ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.name_value,
        size,
        is_null,
        v);
      i.name_null = is_null;
      i.name_size = size;
      grew = grew || (cap != i.name_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // manager_
    //
    {
      // From pragmas.pgsql.hxx:143:26
      ::mgp::Employee*& v =
        o.manager_;

      typedef object_traits< ::mgp::Employee > obj_traits;
      typedef odb::pointer_traits< ::mgp::Employee* > ptr_traits;

      if (i.manager_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.manager_value,
          i.manager_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // id_
    //
    {
      // From pragmas.pgsql.hxx:141:29
      ::google::protobuf::uint64 v;

      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);

      // From pragmas.pgsql.hxx:141:29
      o.set_id (v);
    }

    // name
    //
    {
      // From pragmas.pgsql.hxx:142:53
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);

      // From pragmas.pgsql.hxx:142:53
      o._internal_set_name (v);
    }
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::persist_statement[] =
  "INSERT INTO \"Org\" "
  "(\"manager\", "
  "\"id\", "
  "\"name\") "
  "VALUES "
  "($1, DEFAULT, $2) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::find_statement[] =
  "SELECT "
  "\"Org\".\"manager\", "
  "\"Org\".\"id\", "
  "\"Org\".\"name\" "
  "FROM \"Org\" "
  "WHERE \"Org\".\"id\"=$1";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::update_statement[] =
  "UPDATE \"Org\" "
  "SET "
  "\"manager\"=$1, "
  "\"name\"=$2 "
  "WHERE \"id\"=$3";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::erase_statement[] =
  "DELETE FROM \"Org\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"Org\".\"manager\",\n"
  "\"Org\".\"id\",\n"
  "\"Org\".\"name\"\n"
  "FROM \"Org\"\n"
  "LEFT JOIN \"Employee\" AS \"manager\" ON \"manager\".\"id\"=\"Org\".\"manager\"";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"Org\"";

  const char access::object_traits_impl< ::mgp::Org, id_pgsql >::table_name[] =
  "\"Org\"";

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    // From pragmas.pgsql.hxx:141:29
    obj.set_id (id (sts.id_image ()));

    id_image_type& i (sts.id_image ());
    // From pragmas.pgsql.hxx:141:21
    init (i, obj.id ());

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    {
      ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile > const& v =
        obj.medias_;

      medias_traits::persist (
        v,
        esc.medias_);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    // From pragmas.pgsql.hxx:141:21
    const id_type& id (
      obj.id ());
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    {
      ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile > const& v =
        obj.medias_;

      medias_traits::update (
        v,
        esc.medias_);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    medias_traits::erase (
      esc.medias_);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::mgp::Org, id_pgsql >::pointer_type
  access::object_traits_impl< ::mgp::Org, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::mgp::Org, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::mgp::Org, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    // From pragmas.pgsql.hxx:141:21
    const id_type& id  (
      obj.id ());

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::mgp::Org, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::mgp::Org, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    {
      ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile >& v =
        obj.medias_;

      medias_traits::load (
        v,
        esc.medias_);
    }
  }

  result< access::object_traits_impl< ::mgp::Org, id_pgsql >::object_type >
  access::object_traits_impl< ::mgp::Org, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::mgp::Org, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  // Inventory
  //

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  persist_statement_name[] = "persist_mgp_Inventory";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  find_statement_name[] = "find_mgp_Inventory";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  update_statement_name[] = "update_mgp_Inventory";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  erase_statement_name[] = "erase_mgp_Inventory";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  query_statement_name[] = "query_mgp_Inventory";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  erase_query_statement_name[] = "erase_query_mgp_Inventory";

  const unsigned int access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  const char alias_traits<  ::mgp::Org,
    id_pgsql,
    access::object_traits_impl< ::mgp::Inventory, id_pgsql >::org_tag>::
  table_name[] = "\"org\"";

  struct access::object_traits_impl< ::mgp::Inventory, id_pgsql >::extra_statement_cache_type
  {
    pgsql::container_statements_impl< medias_traits > medias_;

    extra_statement_cache_type (
      pgsql::connection& c,
      image_type&,
      id_image_type&,
      pgsql::binding& id,
      pgsql::binding&,
      pgsql::native_binding& idn,
      const unsigned int* idt)
    : medias_ (c, id, idn, idt)
    {
    }
  };

  // medias_
  //

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  select_name[] = "select_mgp_Inventory_medias";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  insert_name[] = "insert_mgp_Inventory_medias";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  delete_name[] = "delete_mgp_Inventory_medias";

  const unsigned int access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  insert_types[] =
  {
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  select_statement[] =
  "SELECT "
  "\"Inventory_medias\".\"index\", "
  "\"Inventory_medias\".\"value_id\", "
  "\"Inventory_medias\".\"value_content_length\", "
  "\"Inventory_medias\".\"value_tag\", "
  "\"Inventory_medias\".\"value_content_type\", "
  "\"Inventory_medias\".\"value_uri\", "
  "\"Inventory_medias\".\"value_data\" "
  "FROM \"Inventory_medias\" "
  "WHERE \"Inventory_medias\".\"object_id\"=$1 ORDER BY \"Inventory_medias\".\"index\"";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  insert_statement[] =
  "INSERT INTO \"Inventory_medias\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value_id\", "
  "\"value_content_length\", "
  "\"value_tag\", "
  "\"value_content_type\", "
  "\"value_uri\", "
  "\"value_data\") "
  "VALUES "
  "($1, $2, $3, $4, $5, $6, $7, $8)";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  delete_statement[] =
  "DELETE FROM \"Inventory_medias\" "
  "WHERE \"object_id\"=$1";

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace pgsql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    composite_value_traits< value_type, id_pgsql >::bind (
      b + n, d.value_value, sk);
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = 0;

    // value
    //
    if (composite_value_traits< value_type, id_pgsql >::grow (
          i.value_value, t + 1UL))
      grew = true;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace pgsql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      pgsql::value_traits<
          index_type,
          pgsql::id_integer >::set_image (
        i.index_value, is_null, *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      if (composite_value_traits< value_type, id_pgsql >::init (
            i.value_value,
            v,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      pgsql::value_traits<
          index_type,
          pgsql::id_integer >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      composite_value_traits< value_type, id_pgsql >::init (
        v,
        i.value_value,
        db);
    }
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  delete_ (void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::medias_traits::
  erase (statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::mgp::Inventory, id_pgsql >::id_type
  access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::mgp::Inventory, id_pgsql >::id_type
  access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // org_
    //
    t[0UL] = 0;

    // id_
    //
    t[1UL] = 0;

    // inventory_number_
    //
    t[2UL] = 0;

    // name
    //
    if (t[3UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // org_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.org_value;
    b[n].is_null = &i.org_null;
    n++;

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // inventory_number_
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.inventory_number_value;
    b[n].is_null = &i.inventory_number_null;
    n++;

    // name
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.name_value.data ();
    b[n].capacity = i.name_value.capacity ();
    b[n].size = &i.name_size;
    b[n].is_null = &i.name_null;
    n++;
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // org_
    //
    {
      // From pragmas.pgsql.hxx:148:28
      ::mgp::Org* const& v =
        o.org_;

      typedef object_traits< ::mgp::Org > obj_traits;
      typedef odb::pointer_traits< ::mgp::Org* > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.org_value, is_null, id);
        i.org_null = is_null;
      }
      else
        i.org_null = true;
    }

    // inventory_number_
    //
    {
      // From pragmas.pgsql.hxx:149:41
      ::google::protobuf::uint64 const& v =
        o.inventory_number ();

      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_image (
        i.inventory_number_value, is_null, v);
      i.inventory_number_null = is_null;
    }

    // name
    //
    {
      // From pragmas.pgsql.hxx:150:49
      ::std::string const& v =
        o.name ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.name_value,
        size,
        is_null,
        v);
      i.name_null = is_null;
      i.name_size = size;
      grew = grew || (cap != i.name_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // org_
    //
    {
      // From pragmas.pgsql.hxx:148:28
      ::mgp::Org*& v =
        o.org_;

      typedef object_traits< ::mgp::Org > obj_traits;
      typedef odb::pointer_traits< ::mgp::Org* > ptr_traits;

      if (i.org_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.org_value,
          i.org_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // id_
    //
    {
      // From pragmas.pgsql.hxx:147:35
      ::google::protobuf::uint64 v;

      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);

      // From pragmas.pgsql.hxx:147:35
      o.set_id (v);
    }

    // inventory_number_
    //
    {
      // From pragmas.pgsql.hxx:149:63
      ::google::protobuf::uint64 v;

      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_value (
        v,
        i.inventory_number_value,
        i.inventory_number_null);

      // From pragmas.pgsql.hxx:149:63
      o.set_inventory_number (v);
    }

    // name
    //
    {
      // From pragmas.pgsql.hxx:150:59
      ::std::string v;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);

      // From pragmas.pgsql.hxx:150:59
      o._internal_set_name (v);
    }
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          ::google::protobuf::uint64,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::persist_statement[] =
  "INSERT INTO \"Inventory\" "
  "(\"org\", "
  "\"id\", "
  "\"inventory_number\", "
  "\"name\") "
  "VALUES "
  "($1, DEFAULT, $2, $3) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::find_statement[] =
  "SELECT "
  "\"Inventory\".\"org\", "
  "\"Inventory\".\"id\", "
  "\"Inventory\".\"inventory_number\", "
  "\"Inventory\".\"name\" "
  "FROM \"Inventory\" "
  "WHERE \"Inventory\".\"id\"=$1";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::update_statement[] =
  "UPDATE \"Inventory\" "
  "SET "
  "\"org\"=$1, "
  "\"inventory_number\"=$2, "
  "\"name\"=$3 "
  "WHERE \"id\"=$4";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::erase_statement[] =
  "DELETE FROM \"Inventory\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::query_statement[] =
  "SELECT\n"
  "\"Inventory\".\"org\",\n"
  "\"Inventory\".\"id\",\n"
  "\"Inventory\".\"inventory_number\",\n"
  "\"Inventory\".\"name\"\n"
  "FROM \"Inventory\"\n"
  "LEFT JOIN \"Org\" AS \"org\" ON \"org\".\"id\"=\"Inventory\".\"org\"";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"Inventory\"";

  const char access::object_traits_impl< ::mgp::Inventory, id_pgsql >::table_name[] =
  "\"Inventory\"";

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    // From pragmas.pgsql.hxx:147:35
    obj.set_id (id (sts.id_image ()));

    id_image_type& i (sts.id_image ());
    // From pragmas.pgsql.hxx:147:27
    init (i, obj.id ());

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    {
      ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile > const& v =
        obj.medias_;

      medias_traits::persist (
        v,
        esc.medias_);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    // From pragmas.pgsql.hxx:147:27
    const id_type& id (
      obj.id ());
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    {
      ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile > const& v =
        obj.medias_;

      medias_traits::update (
        v,
        esc.medias_);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    medias_traits::erase (
      esc.medias_);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::mgp::Inventory, id_pgsql >::pointer_type
  access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    // From pragmas.pgsql.hxx:147:27
    const id_type& id  (
      obj.id ());

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // medias_
    //
    {
      ::google::protobuf::RepeatedPtrField< ::mgp::MediaFile >& v =
        obj.medias_;

      medias_traits::load (
        v,
        esc.medias_);
    }
  }

  result< access::object_traits_impl< ::mgp::Inventory, id_pgsql >::object_type >
  access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        true,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::mgp::Inventory, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
